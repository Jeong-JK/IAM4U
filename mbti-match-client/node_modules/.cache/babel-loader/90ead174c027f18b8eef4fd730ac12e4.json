{"ast":null,"code":"// import React from 'react';\n// import './App.scss';\n// import { useSelector } from 'react-redux';\n// import { BrowserRouter, Switch, Route, Redirect, useLocation } from 'react-router-dom';\n// import Login from './containers/Login';\n// import Signup from './containers/Signup';\n// import ListMembers from './containers/ListMembers';\n// import Profile from './containers/Profile';\n// import Edit from './containers/Edit';\n// import ChatList from './containers/ChatList';\n// import ChatView from './containers/ChatView';\n// import NotFound from './containers/NotFound';\n// import MainLoading from './containers/MainLoading';\n// const App = () => {\n//   const { isAuthenticated, isMainLoading } = useSelector(state => ({\n//     isAuthenticated: state.isAuthenticated,\n//     isMainLoading: state.isMainLoading\n//   }));\n//   const privateRender = (Component, props) => {\n//     return isAuthenticated === true ? (\n//       <Component props={props} />\n//     ) : (\n//       <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n//     );\n//   };\n//   const notLoginRender = (Component, props) => {\n//     return !isAuthenticated === true ? (\n//       <Component props={props} />\n//     ) : (\n//       <Redirect\n//         to={{ pathname: '/profile', state: { from: props.location } }}\n//       />\n//     );\n//   };\n//   return (\n//     <div className=\"app\">\n//       <div className=\"wrap\">\n//         {isMainLoading ? (\n//           <MainLoading />\n//         ) : (\n//           <Switch>\n//             <Route exact path=\"/\">\n//               <Redirect to=\"/login\" />\n//             </Route>\n//             <Route\n//               path=\"/login\"\n//               render={props => notLoginRender(Login, props)}\n//             />\n//             <Route\n//               path=\"/signup\"\n//               render={props => notLoginRender(Signup, props)}\n//             />\n//             <Route\n//               path=\"/profile/edit\"\n//               render={props => privateRender(Edit, props)}\n//             />\n//             <Route\n//               path=\"/profile\"\n//               render={props => privateRender(Profile, props)}\n//             />\n//             <Route\n//               path=\"/users/list\"\n//               render={props => privateRender(ListMembers, props)}\n//             />\n//             <Route\n//               path=\"/chats\"\n//               render={props => privateRender(ChatList, props)}\n//             />\n//             <Route\n//               path=\"/chat/room/:roomId\"\n//               render={props => privateRender(ChatView, props)}\n//             />\n//             <Route component={NotFound} />\n//           </Switch>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n// export default App;\nimport React from'react';import'./App.scss';import{useSelector}from'react-redux';import{BrowserRouter,Routes,Route,Navigate,useLocation}from'react-router-dom';import{useDispatch}from'react-redux';import{useEffect}from'react';import{CONFIRMED_NOT_AUTHENTICATED}from'./constants/actionTypes';import Login from'./containers/Login';import Signup from'./containers/Signup';import ListMembers from'./containers/ListMembers';import Profile from'./containers/Profile';import Edit from'./containers/Edit';import ChatList from'./containers/ChatList';import ChatView from'./containers/ChatView';import NotFound from'./containers/NotFound';import MainLoading from'./containers/MainLoading';// ✅ 로그인 여부 판단용 커스텀 라우터\nvar PrivateRoute=function PrivateRoute(_ref){var children=_ref.children;var location=useLocation();var isAuthenticated=useSelector(function(state){return state.isAuthenticated;});return isAuthenticated?children:React.createElement(Navigate,{to:\"/login\",state:{from:location}});};var NotLoggedInRoute=function NotLoggedInRoute(_ref2){var children=_ref2.children;var isAuthenticated=useSelector(function(state){return state.isAuthenticated;});return!isAuthenticated?children:React.createElement(Navigate,{to:\"/profile\"});};var App=function App(){var _useSelector=useSelector(function(state){return{isMainLoading:state.isMainLoading};}),isMainLoading=_useSelector.isMainLoading;var dispatch=useDispatch();useEffect(function(){dispatch({type:CONFIRMED_NOT_AUTHENTICATED});},[]);return React.createElement(\"div\",{className:\"app\"},React.createElement(\"div\",{className:\"wrap\"},isMainLoading?React.createElement(MainLoading,null):React.createElement(BrowserRouter,null,React.createElement(Routes,null,React.createElement(Route,{path:\"/\",element:React.createElement(Navigate,{to:\"/login\",replace:true})}),React.createElement(Route,{path:\"/login\",element:React.createElement(NotLoggedInRoute,null,React.createElement(Login,null))}),React.createElement(Route,{path:\"/signup\",element:React.createElement(NotLoggedInRoute,null,React.createElement(Signup,null))}),React.createElement(Route,{path:\"/profile/edit\",element:React.createElement(PrivateRoute,null,React.createElement(Edit,null))}),React.createElement(Route,{path:\"/profile\",element:React.createElement(PrivateRoute,null,React.createElement(Profile,null))}),React.createElement(Route,{path:\"/users/list\",element:React.createElement(PrivateRoute,null,React.createElement(ListMembers,null))}),React.createElement(Route,{path:\"/chats\",element:React.createElement(PrivateRoute,null,React.createElement(ChatList,null))}),React.createElement(Route,{path:\"/chat/room/:roomId\",element:React.createElement(PrivateRoute,null,React.createElement(ChatView,null))}),React.createElement(Route,{path:\"*\",element:React.createElement(NotFound,null)})))));};export default App;","map":{"version":3,"names":["React","useSelector","BrowserRouter","Routes","Route","Navigate","useLocation","useDispatch","useEffect","CONFIRMED_NOT_AUTHENTICATED","Login","Signup","ListMembers","Profile","Edit","ChatList","ChatView","NotFound","MainLoading","PrivateRoute","_ref","children","location","isAuthenticated","state","createElement","to","from","NotLoggedInRoute","_ref2","App","_useSelector","isMainLoading","dispatch","type","className","path","element","replace"],"sources":["C:/test/mbti-match-client-master/src/App.js"],"sourcesContent":["// import React from 'react';\n// import './App.scss';\n// import { useSelector } from 'react-redux';\n// import { BrowserRouter, Switch, Route, Redirect, useLocation } from 'react-router-dom';\n// import Login from './containers/Login';\n// import Signup from './containers/Signup';\n// import ListMembers from './containers/ListMembers';\n// import Profile from './containers/Profile';\n// import Edit from './containers/Edit';\n// import ChatList from './containers/ChatList';\n// import ChatView from './containers/ChatView';\n// import NotFound from './containers/NotFound';\n// import MainLoading from './containers/MainLoading';\n\n// const App = () => {\n//   const { isAuthenticated, isMainLoading } = useSelector(state => ({\n//     isAuthenticated: state.isAuthenticated,\n//     isMainLoading: state.isMainLoading\n//   }));\n\n//   const privateRender = (Component, props) => {\n//     return isAuthenticated === true ? (\n//       <Component props={props} />\n//     ) : (\n//       <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n//     );\n//   };\n\n//   const notLoginRender = (Component, props) => {\n//     return !isAuthenticated === true ? (\n//       <Component props={props} />\n//     ) : (\n//       <Redirect\n//         to={{ pathname: '/profile', state: { from: props.location } }}\n//       />\n//     );\n//   };\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"wrap\">\n//         {isMainLoading ? (\n//           <MainLoading />\n//         ) : (\n//           <Switch>\n//             <Route exact path=\"/\">\n//               <Redirect to=\"/login\" />\n//             </Route>\n\n//             <Route\n//               path=\"/login\"\n//               render={props => notLoginRender(Login, props)}\n//             />\n//             <Route\n//               path=\"/signup\"\n//               render={props => notLoginRender(Signup, props)}\n//             />\n//             <Route\n//               path=\"/profile/edit\"\n//               render={props => privateRender(Edit, props)}\n//             />\n//             <Route\n//               path=\"/profile\"\n//               render={props => privateRender(Profile, props)}\n//             />\n//             <Route\n//               path=\"/users/list\"\n//               render={props => privateRender(ListMembers, props)}\n//             />\n\n//             <Route\n//               path=\"/chats\"\n//               render={props => privateRender(ChatList, props)}\n//             />\n//             <Route\n//               path=\"/chat/room/:roomId\"\n//               render={props => privateRender(ChatView, props)}\n//             />\n//             <Route component={NotFound} />\n//           </Switch>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React from 'react';\nimport './App.scss';\nimport { useSelector } from 'react-redux';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n  Navigate,\n  useLocation,\n} from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { CONFIRMED_NOT_AUTHENTICATED } from './constants/actionTypes';\n\nimport Login from './containers/Login';\nimport Signup from './containers/Signup';\nimport ListMembers from './containers/ListMembers';\nimport Profile from './containers/Profile';\nimport Edit from './containers/Edit';\nimport ChatList from './containers/ChatList';\nimport ChatView from './containers/ChatView';\nimport NotFound from './containers/NotFound';\nimport MainLoading from './containers/MainLoading';\n\n// ✅ 로그인 여부 판단용 커스텀 라우터\nconst PrivateRoute = ({ children }) => {\n  const location = useLocation();\n  const isAuthenticated = useSelector(state => state.isAuthenticated);\n  return isAuthenticated ? children : <Navigate to=\"/login\" state={{ from: location }} />;\n};\n\nconst NotLoggedInRoute = ({ children }) => {\n  const isAuthenticated = useSelector(state => state.isAuthenticated);\n  return !isAuthenticated ? children : <Navigate to=\"/profile\" />;\n};\n\nconst App = () => {\n  const { isMainLoading } = useSelector(state => ({\n    isMainLoading: state.isMainLoading\n  }));\n\nconst dispatch = useDispatch();\nuseEffect(() => {\n  dispatch({ type: CONFIRMED_NOT_AUTHENTICATED });\n}, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"wrap\">\n        {isMainLoading ? (\n          <MainLoading />\n        ) : (\n          <BrowserRouter>\n            <Routes>\n              {/* 홈 리디렉션 */}\n              <Route path=\"/\" element={<Navigate to=\"/login\" replace />} />\n\n              {/* 로그인/회원가입 */}\n              <Route path=\"/login\" element={\n                <NotLoggedInRoute><Login /></NotLoggedInRoute>\n              } />\n              <Route path=\"/signup\" element={\n                <NotLoggedInRoute><Signup /></NotLoggedInRoute>\n              } />\n\n              {/* 인증 필요 라우트 */}\n              <Route path=\"/profile/edit\" element={\n                <PrivateRoute><Edit /></PrivateRoute>\n              } />\n              <Route path=\"/profile\" element={\n                <PrivateRoute><Profile /></PrivateRoute>\n              } />\n              <Route path=\"/users/list\" element={\n                <PrivateRoute><ListMembers /></PrivateRoute>\n              } />\n              <Route path=\"/chats\" element={\n                <PrivateRoute><ChatList /></PrivateRoute>\n              } />\n              <Route path=\"/chat/room/:roomId\" element={\n                <PrivateRoute><ChatView /></PrivateRoute>\n              } />\n\n              {/* 404 */}\n              <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n          </BrowserRouter>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}