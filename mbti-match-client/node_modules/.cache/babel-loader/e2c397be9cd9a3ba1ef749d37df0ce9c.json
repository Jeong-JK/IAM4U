{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:\\\\test\\\\mbti-match-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nclass QuickLRU {\n  constructor(options = {}) {\n    if (!(options.maxSize && options.maxSize > 0)) {\n      throw new TypeError('`maxSize` must be a number greater than 0');\n    }\n    this.maxSize = options.maxSize;\n    this.cache = new Map();\n    this.oldCache = new Map();\n    this._size = 0;\n  }\n  _set(key, value) {\n    this.cache.set(key, value);\n    this._size++;\n    if (this._size >= this.maxSize) {\n      this._size = 0;\n      this.oldCache = this.cache;\n      this.cache = new Map();\n    }\n  }\n  get(key) {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n    if (this.oldCache.has(key)) {\n      const value = this.oldCache.get(key);\n      this.oldCache.delete(key);\n      this._set(key, value);\n      return value;\n    }\n  }\n  set(key, value) {\n    if (this.cache.has(key)) {\n      this.cache.set(key, value);\n    } else {\n      this._set(key, value);\n    }\n    return this;\n  }\n  has(key) {\n    return this.cache.has(key) || this.oldCache.has(key);\n  }\n  peek(key) {\n    if (this.cache.has(key)) {\n      return this.cache.get(key);\n    }\n    if (this.oldCache.has(key)) {\n      return this.oldCache.get(key);\n    }\n  }\n  delete(key) {\n    const deleted = this.cache.delete(key);\n    if (deleted) {\n      this._size--;\n    }\n    return this.oldCache.delete(key) || deleted;\n  }\n  clear() {\n    this.cache.clear();\n    this.oldCache.clear();\n    this._size = 0;\n  }\n  *keys() {\n    for (const _ref of this) {\n      var _ref2 = _slicedToArray(_ref, 1);\n      const key = _ref2[0];\n      yield key;\n    }\n  }\n  *values() {\n    for (const _ref3 of this) {\n      var _ref4 = _slicedToArray(_ref3, 2);\n      const value = _ref4[1];\n      yield value;\n    }\n  }\n  *[Symbol.iterator]() {\n    for (const item of this.cache) {\n      yield item;\n    }\n    for (const item of this.oldCache) {\n      const _item = _slicedToArray(item, 1),\n        key = _item[0];\n      if (!this.cache.has(key)) {\n        yield item;\n      }\n    }\n  }\n  get size() {\n    let oldCacheSize = 0;\n    for (const key of this.oldCache.keys()) {\n      if (!this.cache.has(key)) {\n        oldCacheSize++;\n      }\n    }\n    return this._size + oldCacheSize;\n  }\n}\nmodule.exports = QuickLRU;","map":null,"metadata":{},"sourceType":"script"}