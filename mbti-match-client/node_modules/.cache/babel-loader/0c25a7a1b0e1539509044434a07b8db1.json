{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\test\\\\mbti-match-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"C:\\\\test\\\\mbti-match-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _wrapAsyncGenerator from \"C:\\\\test\\\\mbti-match-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapAsyncGenerator\";\nimport _awaitAsyncGenerator from \"C:\\\\test\\\\mbti-match-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/awaitAsyncGenerator\";\nimport _asyncGeneratorDelegate from \"C:\\\\test\\\\mbti-match-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncGeneratorDelegate\";\nfunction _asyncIterator(r) { var n, t, o, e = 2; for (\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) { if (t && null != (n = r[t])) return n.call(r); if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r)); t = \"@@asyncIterator\", o = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(r) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var n = r.done; return Promise.resolve(r.value).then(function (r) { return { value: r, done: n }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(r) { this.s = r, this.n = r.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(r) { var n = this.s.return; return void 0 === n ? Promise.resolve({ value: r, done: !0 }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); }, throw: function _throw(r) { var n = this.s.return; return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(r); }\nexport var streamChunk = /*#__PURE__*/_regeneratorRuntime.mark(function streamChunk(chunk, chunkSize) {\n  var len, pos, end;\n  return _regeneratorRuntime.wrap(function streamChunk$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          len = chunk.byteLength;\n          if (!(!chunkSize || len < chunkSize)) {\n            _context.next = 5;\n            break;\n          }\n          _context.next = 4;\n          return chunk;\n        case 4:\n          return _context.abrupt(\"return\");\n        case 5:\n          pos = 0;\n        case 6:\n          if (!(pos < len)) {\n            _context.next = 13;\n            break;\n          }\n          end = pos + chunkSize;\n          _context.next = 10;\n          return chunk.slice(pos, end);\n        case 10:\n          pos = end;\n          _context.next = 6;\n          break;\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, streamChunk);\n});\nexport var readBytes = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(iterable, chunkSize) {\n    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 2;\n            _iterator = _asyncIterator(readStream(iterable));\n          case 4:\n            _context2.next = 6;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 6:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 10;\n            return _awaitAsyncGenerator(_step.value);\n          case 10:\n            _value = _context2.sent;\n            if (_iteratorNormalCompletion) {\n              _context2.next = 17;\n              break;\n            }\n            chunk = _value;\n            return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(streamChunk(chunk, chunkSize)), _awaitAsyncGenerator), \"t0\", 14);\n          case 14:\n            _iteratorNormalCompletion = true;\n            _context2.next = 4;\n            break;\n          case 17:\n            _context2.next = 23;\n            break;\n          case 19:\n            _context2.prev = 19;\n            _context2.t1 = _context2[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context2.t1;\n          case 23:\n            _context2.prev = 23;\n            _context2.prev = 24;\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context2.next = 28;\n              break;\n            }\n            _context2.next = 28;\n            return _awaitAsyncGenerator(_iterator.return());\n          case 28:\n            _context2.prev = 28;\n            if (!_didIteratorError) {\n              _context2.next = 31;\n              break;\n            }\n            throw _iteratorError;\n          case 31:\n            return _context2.finish(28);\n          case 32:\n            return _context2.finish(23);\n          case 33:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee, null, [[2, 19, 23, 33], [24,, 28, 32]]);\n  }));\n  return function readBytes(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar readStream = /*#__PURE__*/function () {\n  var _ref2 = _wrapAsyncGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stream) {\n    var reader, _yield$_awaitAsyncGen, done, value;\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!stream[Symbol.asyncIterator]) {\n              _context3.next = 3;\n              break;\n            }\n            return _context3.delegateYield(_asyncGeneratorDelegate(_asyncIterator(stream), _awaitAsyncGenerator), \"t0\", 2);\n          case 2:\n            return _context3.abrupt(\"return\");\n          case 3:\n            reader = stream.getReader();\n            _context3.prev = 4;\n          case 5:\n            _context3.next = 7;\n            return _awaitAsyncGenerator(reader.read());\n          case 7:\n            _yield$_awaitAsyncGen = _context3.sent;\n            done = _yield$_awaitAsyncGen.done;\n            value = _yield$_awaitAsyncGen.value;\n            if (!done) {\n              _context3.next = 12;\n              break;\n            }\n            return _context3.abrupt(\"break\", 16);\n          case 12:\n            _context3.next = 14;\n            return value;\n          case 14:\n            _context3.next = 5;\n            break;\n          case 16:\n            _context3.prev = 16;\n            _context3.next = 19;\n            return _awaitAsyncGenerator(reader.cancel());\n          case 19:\n            return _context3.finish(16);\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2, null, [[4,, 16, 20]]);\n  }));\n  return function readStream(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var trackStream = function trackStream(stream, chunkSize, onProgress, onFinish) {\n  var iterator = readBytes(stream, chunkSize);\n  var bytes = 0;\n  var done;\n  var _onFinish = function _onFinish(e) {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  };\n  return new ReadableStream({\n    pull: function () {\n      var _pull = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(controller) {\n        var _yield$iterator$next, _done, value, len, loadedBytes;\n        return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return iterator.next();\n              case 3:\n                _yield$iterator$next = _context4.sent;\n                _done = _yield$iterator$next.done;\n                value = _yield$iterator$next.value;\n                if (!_done) {\n                  _context4.next = 10;\n                  break;\n                }\n                _onFinish();\n                controller.close();\n                return _context4.abrupt(\"return\");\n              case 10:\n                len = value.byteLength;\n                if (onProgress) {\n                  loadedBytes = bytes += len;\n                  onProgress(loadedBytes);\n                }\n                controller.enqueue(new Uint8Array(value));\n                _context4.next = 19;\n                break;\n              case 15:\n                _context4.prev = 15;\n                _context4.t0 = _context4[\"catch\"](0);\n                _onFinish(_context4.t0);\n                throw _context4.t0;\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee3, null, [[0, 15]]);\n      }));\n      function pull(_x4) {\n        return _pull.apply(this, arguments);\n      }\n      return pull;\n    }(),\n    cancel: function cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  });\n};","map":null,"metadata":{},"sourceType":"module"}