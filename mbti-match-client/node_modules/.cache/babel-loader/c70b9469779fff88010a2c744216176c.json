{"ast":null,"code":"var _jsxFileName = \"C:\\\\test\\\\mbti-match-client\\\\src\\\\index.js\";\n// import React from 'react';\n// import { render } from 'react-dom';\n// import { createStore } from 'redux';\n// import { Provider } from 'react-redux';\n// import { BrowserRouter as Router } from 'react-router-dom';\n// import ReactDOM from 'react-dom/client'\n// import matchApp from './reducers';\n// import App from './App';\n// import './index.scss';\n// import { successUserAuthentication, checkUserNotLogin } from './actions';\n// import { getUser } from './api';\n// import { objectKeysToCamelCase } from './utility/formattingData';\n// import { Amplify } from 'aws-amplify';\n// import awsconfig from './aws-config';\n\n// Amplify.configure(awsconfig);\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(<App />);\n\n// const store = createStore(\n//   matchApp,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );\n// const loadUser = async () => {\n//   const result = await getUser();\n// //   if (!result || !result.isAuthenticated) {\n// //     return store.dispatch(checkUserNotLogin());}\n// //   store.dispatch(successUserAuthentication(objectKeysToCamelCase(result.user)));\n// // };\n// if (!result || !result.isAuthenticated) {\n//   store.dispatch(checkUserNotLogin());\n// } else {\n//   store.dispatch(successUserAuthentication(objectKeysToCamelCase(result.user)));\n// }};\n\n// loadUser();\n\n// render(\n//   <Provider store={store}>\n//     <Router>\n//       <App />\n//     </Router>\n//   </Provider>,\n//   document.getElementById('root')\n// );\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport matchApp from './reducers';\nimport App from './App';\nimport './index.scss';\nimport { successUserAuthentication, checkUserNotLogin } from './actions';\nimport { getUser } from './api';\nimport { objectKeysToCamelCase } from './utility/formattingData';\nimport { Amplify } from 'aws-amplify';\nimport awsconfig from './aws-config';\nAmplify.configure(awsconfig);\nconst store = createStore(matchApp, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nconst loadUser = async () => {\n  const result = await getUser();\n  if (!result || !result.isAuthenticated) {\n    store.dispatch(checkUserNotLogin());\n  } else {\n    store.dispatch(successUserAuthentication(objectKeysToCamelCase(result.user)));\n  }\n};\nloadUser();\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <Provider store={store}>\n//     <Router>\n//       <App />\n//     </Router>\n//   </Provider>\n// );\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90\n  },\n  __self: this\n}, React.createElement(Router, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 92\n  },\n  __self: this\n}))), document.getElementById('root'));","map":{"version":3,"names":["React","ReactDOM","createStore","Provider","BrowserRouter","Router","matchApp","App","successUserAuthentication","checkUserNotLogin","getUser","objectKeysToCamelCase","Amplify","awsconfig","configure","store","window","__REDUX_DEVTOOLS_EXTENSION__","loadUser","result","isAuthenticated","dispatch","user","render","createElement","__source","fileName","_jsxFileName","lineNumber","__self","document","getElementById"],"sources":["C:/test/mbti-match-client/src/index.js"],"sourcesContent":["// import React from 'react';\n// import { render } from 'react-dom';\n// import { createStore } from 'redux';\n// import { Provider } from 'react-redux';\n// import { BrowserRouter as Router } from 'react-router-dom';\n// import ReactDOM from 'react-dom/client'\n// import matchApp from './reducers';\n// import App from './App';\n// import './index.scss';\n// import { successUserAuthentication, checkUserNotLogin } from './actions';\n// import { getUser } from './api';\n// import { objectKeysToCamelCase } from './utility/formattingData';\n// import { Amplify } from 'aws-amplify';\n// import awsconfig from './aws-config';\n\n// Amplify.configure(awsconfig);\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(<App />);\n\n// const store = createStore(\n//   matchApp,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );\n// const loadUser = async () => {\n//   const result = await getUser();\n// //   if (!result || !result.isAuthenticated) {\n// //     return store.dispatch(checkUserNotLogin());}\n// //   store.dispatch(successUserAuthentication(objectKeysToCamelCase(result.user)));\n// // };\n// if (!result || !result.isAuthenticated) {\n//   store.dispatch(checkUserNotLogin());\n// } else {\n//   store.dispatch(successUserAuthentication(objectKeysToCamelCase(result.user)));\n// }};\n\n\n// loadUser();\n\n// render(\n//   <Provider store={store}>\n//     <Router>\n//       <App />\n//     </Router>\n//   </Provider>,\n//   document.getElementById('root')\n// );\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport matchApp from './reducers';\nimport App from './App';\nimport './index.scss';\nimport { successUserAuthentication, checkUserNotLogin } from './actions';\nimport { getUser } from './api';\nimport { objectKeysToCamelCase } from './utility/formattingData';\nimport { Amplify } from 'aws-amplify';\nimport awsconfig from './aws-config';\n\nAmplify.configure(awsconfig);\n\nconst store = createStore(\n  matchApp,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nconst loadUser = async () => {\n  const result = await getUser();\n  if (!result || !result.isAuthenticated) {\n    store.dispatch(checkUserNotLogin());\n  } else {\n    store.dispatch(successUserAuthentication(objectKeysToCamelCase(result.user)));\n  }\n};\n\nloadUser();\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(\n//   <Provider store={store}>\n//     <Router>\n//       <App />\n//     </Router>\n//   </Provider>\n// );\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,aAAa,IAAIC,MAAM,QAAQ,kBAAkB;AAC1D,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAO,cAAc;AACrB,SAASC,yBAAyB,EAAEC,iBAAiB,QAAQ,WAAW;AACxE,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,qBAAqB,QAAQ,0BAA0B;AAChE,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAOC,SAAS,MAAM,cAAc;AAEpCD,OAAO,CAACE,SAAS,CAACD,SAAS,CAAC;AAE5B,MAAME,KAAK,GAAGb,WAAW,CACvBI,QAAQ,EACRU,MAAM,CAACC,4BAA4B,IAAID,MAAM,CAACC,4BAA4B,CAAC,CAC7E,CAAC;AAED,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAC3B,MAAMC,MAAM,GAAG,MAAMT,OAAO,CAAC,CAAC;EAC9B,IAAI,CAACS,MAAM,IAAI,CAACA,MAAM,CAACC,eAAe,EAAE;IACtCL,KAAK,CAACM,QAAQ,CAACZ,iBAAiB,CAAC,CAAC,CAAC;EACrC,CAAC,MAAM;IACLM,KAAK,CAACM,QAAQ,CAACb,yBAAyB,CAACG,qBAAqB,CAACQ,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC;EAC/E;AACF,CAAC;AAEDJ,QAAQ,CAAC,CAAC;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,QAAQ,CAACsB,MAAM,CACbvB,KAAA,CAAAwB,aAAA,CAACrB,QAAQ;EAACY,KAAK,EAAEA,KAAM;EAAAU,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;EAAA;EAAAC,MAAA;AAAA,GACrB7B,KAAA,CAAAwB,aAAA,CAACnB,MAAM;EAAAoB,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;EAAA;EAAAC,MAAA;AAAA,GACL7B,KAAA,CAAAwB,aAAA,CAACjB,GAAG;EAAAkB,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;EAAA;EAAAC,MAAA;AAAA,CAAE,CACA,CACA,CAAC,EACXC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}