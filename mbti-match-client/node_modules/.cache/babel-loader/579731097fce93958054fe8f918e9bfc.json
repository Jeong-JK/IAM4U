{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:\\\\test\\\\mbti-match-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nconst isObject = value => typeof value === 'object' && value !== null;\nconst mapObjectSkip = Symbol('skip');\n\n// Customized for this use-case\nconst isObjectCustom = value => isObject(value) && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);\nconst mapObject = (object, mapper, options, isSeen = new WeakMap()) => {\n  options = {\n    deep: false,\n    target: {},\n    ...options\n  };\n  if (isSeen.has(object)) {\n    return isSeen.get(object);\n  }\n  isSeen.set(object, options.target);\n  const _options = options,\n    target = _options.target;\n  delete options.target;\n  const mapArray = array => array.map(element => isObjectCustom(element) ? mapObject(element, mapper, options, isSeen) : element);\n  if (Array.isArray(object)) {\n    return mapArray(object);\n  }\n  for (const _ref of Object.entries(object)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    const key = _ref2[0];\n    const value = _ref2[1];\n    const mapResult = mapper(key, value, object);\n    if (mapResult === mapObjectSkip) {\n      continue;\n    }\n    let _mapResult = _slicedToArray(mapResult, 3),\n      newKey = _mapResult[0],\n      newValue = _mapResult[1],\n      _mapResult$ = _mapResult[2];\n    _mapResult$ = _mapResult$ === void 0 ? {} : _mapResult$;\n    let _mapResult$$shouldRec = _mapResult$.shouldRecurse,\n      shouldRecurse = _mapResult$$shouldRec === void 0 ? true : _mapResult$$shouldRec; // Drop `__proto__` keys.\n    if (newKey === '__proto__') {\n      continue;\n    }\n    if (options.deep && shouldRecurse && isObjectCustom(newValue)) {\n      newValue = Array.isArray(newValue) ? mapArray(newValue) : mapObject(newValue, mapper, options, isSeen);\n    }\n    target[newKey] = newValue;\n  }\n  return target;\n};\nmodule.exports = (object, mapper, options) => {\n  if (!isObject(object)) {\n    throw new TypeError(\"Expected an object, got `\".concat(object, \"` (\").concat(typeof object, \")\"));\n  }\n  return mapObject(object, mapper, options);\n};\nmodule.exports.mapObjectSkip = mapObjectSkip;","map":null,"metadata":{},"sourceType":"script"}