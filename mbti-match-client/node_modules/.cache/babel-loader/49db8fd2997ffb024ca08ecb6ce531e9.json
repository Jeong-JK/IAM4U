{"ast":null,"code":"import _defineProperty from \"C:\\\\test\\\\mbti-match-client-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\test\\\\mbti-match-client-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"C:\\\\test\\\\mbti-match-client-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\test\\\\mbti-match-client-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport { trackStream } from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport { progressEventReducer, progressEventDecorator, asyncDecorator } from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\nvar isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nvar isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nvar encodeText = isFetchSupported && (typeof TextEncoder === 'function' ? function (encoder) {\n  return function (str) {\n    return encoder.encode(str);\n  };\n}(new TextEncoder()) : (/*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(str) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = Uint8Array;\n            _context.next = 3;\n            return new Response(str).arrayBuffer();\n          case 3:\n            _context.t1 = _context.sent;\n            return _context.abrupt(\"return\", new _context.t0(_context.t1));\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}()));\nvar test = function test(fn) {\n  try {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return !!fn.apply(void 0, args);\n  } catch (e) {\n    return false;\n  }\n};\nvar supportsRequestStream = isReadableStreamSupported && test(function () {\n  var duplexAccessed = false;\n  var hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    }\n  }).headers.has('Content-Type');\n  return duplexAccessed && !hasContentType;\n});\nvar DEFAULT_CHUNK_SIZE = 64 * 1024;\nvar supportsResponseStream = isReadableStreamSupported && test(function () {\n  return utils.isReadableStream(new Response('').body);\n});\nvar resolvers = {\n  stream: supportsResponseStream && function (res) {\n    return res.body;\n  }\n};\nisFetchSupported && function (res) {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(function (type) {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? function (res) {\n      return res[type]();\n    } : function (_, config) {\n      throw new AxiosError(\"Response type '\".concat(type, \"' is not supported\"), AxiosError.ERR_NOT_SUPPORT, config);\n    });\n  });\n}(new Response());\nvar getBodyLength = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(body) {\n    var _request;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(body == null)) {\n              _context2.next = 2;\n              break;\n            }\n            return _context2.abrupt(\"return\", 0);\n          case 2:\n            if (!utils.isBlob(body)) {\n              _context2.next = 4;\n              break;\n            }\n            return _context2.abrupt(\"return\", body.size);\n          case 4:\n            if (!utils.isSpecCompliantForm(body)) {\n              _context2.next = 9;\n              break;\n            }\n            _request = new Request(platform.origin, {\n              method: 'POST',\n              body: body\n            });\n            _context2.next = 8;\n            return _request.arrayBuffer();\n          case 8:\n            return _context2.abrupt(\"return\", _context2.sent.byteLength);\n          case 9:\n            if (!(utils.isArrayBufferView(body) || utils.isArrayBuffer(body))) {\n              _context2.next = 11;\n              break;\n            }\n            return _context2.abrupt(\"return\", body.byteLength);\n          case 11:\n            if (utils.isURLSearchParams(body)) {\n              body = body + '';\n            }\n            if (!utils.isString(body)) {\n              _context2.next = 16;\n              break;\n            }\n            _context2.next = 15;\n            return encodeText(body);\n          case 15:\n            return _context2.abrupt(\"return\", _context2.sent.byteLength);\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function getBodyLength(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar resolveBodyLength = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(headers, body) {\n    var length;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            length = utils.toFiniteNumber(headers.getContentLength());\n            return _context3.abrupt(\"return\", length == null ? getBodyLength(body) : length);\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return function resolveBodyLength(_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport default isFetchSupported && (/*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(config) {\n    var _resolveConfig, url, method, data, signal, cancelToken, timeout, onDownloadProgress, onUploadProgress, responseType, headers, _resolveConfig$withCr, withCredentials, fetchOptions, composedSignal, request, unsubscribe, requestContentLength, _request, contentTypeHeader, _progressEventDecorat, _progressEventDecorat2, onProgress, flush, isCredentialsSupported, response, isStreamResponse, options, responseContentLength, _ref5, _ref6, _onProgress, _flush, responseData;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _resolveConfig = resolveConfig(config), url = _resolveConfig.url, method = _resolveConfig.method, data = _resolveConfig.data, signal = _resolveConfig.signal, cancelToken = _resolveConfig.cancelToken, timeout = _resolveConfig.timeout, onDownloadProgress = _resolveConfig.onDownloadProgress, onUploadProgress = _resolveConfig.onUploadProgress, responseType = _resolveConfig.responseType, headers = _resolveConfig.headers, _resolveConfig$withCr = _resolveConfig.withCredentials, withCredentials = _resolveConfig$withCr === void 0 ? 'same-origin' : _resolveConfig$withCr, fetchOptions = _resolveConfig.fetchOptions;\n            responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n            composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);\n            unsubscribe = composedSignal && composedSignal.unsubscribe && function () {\n              composedSignal.unsubscribe();\n            };\n            _context4.prev = 4;\n            _context4.t0 = onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head';\n            if (!_context4.t0) {\n              _context4.next = 11;\n              break;\n            }\n            _context4.next = 9;\n            return resolveBodyLength(headers, data);\n          case 9:\n            _context4.t1 = requestContentLength = _context4.sent;\n            _context4.t0 = _context4.t1 !== 0;\n          case 11:\n            if (!_context4.t0) {\n              _context4.next = 15;\n              break;\n            }\n            _request = new Request(url, {\n              method: 'POST',\n              body: data,\n              duplex: \"half\"\n            });\n            if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n              headers.setContentType(contentTypeHeader);\n            }\n            if (_request.body) {\n              _progressEventDecorat = progressEventDecorator(requestContentLength, progressEventReducer(asyncDecorator(onUploadProgress))), _progressEventDecorat2 = _slicedToArray(_progressEventDecorat, 2), onProgress = _progressEventDecorat2[0], flush = _progressEventDecorat2[1];\n              data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);\n            }\n          case 15:\n            if (!utils.isString(withCredentials)) {\n              withCredentials = withCredentials ? 'include' : 'omit';\n            }\n\n            // Cloudflare Workers throws when credentials are defined\n            // see https://github.com/cloudflare/workerd/issues/902\n            isCredentialsSupported = \"credentials\" in Request.prototype;\n            request = new Request(url, _objectSpread({}, fetchOptions, {\n              signal: composedSignal,\n              method: method.toUpperCase(),\n              headers: headers.normalize().toJSON(),\n              body: data,\n              duplex: \"half\",\n              credentials: isCredentialsSupported ? withCredentials : undefined\n            }));\n            _context4.next = 20;\n            return fetch(request);\n          case 20:\n            response = _context4.sent;\n            isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n            if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {\n              options = {};\n              ['status', 'statusText', 'headers'].forEach(function (prop) {\n                options[prop] = response[prop];\n              });\n              responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n              _ref5 = onDownloadProgress && progressEventDecorator(responseContentLength, progressEventReducer(asyncDecorator(onDownloadProgress), true)) || [], _ref6 = _slicedToArray(_ref5, 2), _onProgress = _ref6[0], _flush = _ref6[1];\n              response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, _onProgress, function () {\n                _flush && _flush();\n                unsubscribe && unsubscribe();\n              }), options);\n            }\n            responseType = responseType || 'text';\n            _context4.next = 26;\n            return resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n          case 26:\n            responseData = _context4.sent;\n            !isStreamResponse && unsubscribe && unsubscribe();\n            _context4.next = 30;\n            return new Promise(function (resolve, reject) {\n              settle(resolve, reject, {\n                data: responseData,\n                headers: AxiosHeaders.from(response.headers),\n                status: response.status,\n                statusText: response.statusText,\n                config: config,\n                request: request\n              });\n            });\n          case 30:\n            return _context4.abrupt(\"return\", _context4.sent);\n          case 33:\n            _context4.prev = 33;\n            _context4.t2 = _context4[\"catch\"](4);\n            unsubscribe && unsubscribe();\n            if (!(_context4.t2 && _context4.t2.name === 'TypeError' && /fetch/i.test(_context4.t2.message))) {\n              _context4.next = 38;\n              break;\n            }\n            throw Object.assign(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request), {\n              cause: _context4.t2.cause || _context4.t2\n            });\n          case 38:\n            throw AxiosError.from(_context4.t2, _context4.t2 && _context4.t2.code, config, request);\n          case 39:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[4, 33]]);\n  }));\n  return function (_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}());","map":null,"metadata":{},"sourceType":"module"}